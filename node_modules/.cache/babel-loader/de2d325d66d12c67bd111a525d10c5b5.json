{"ast":null,"code":"import { isFunction } from '@chakra-ui/utils';\nimport * as React from 'react';\n/**\n * Assigns a value to a ref function or object\n *\n * @param ref the ref to assign to\n * @param value the value\n */\n\nfunction assignRef(ref, value) {\n  if (ref == null) return;\n\n  if (isFunction(ref)) {\n    ref(value);\n    return;\n  }\n\n  try {\n    // @ts-ignore\n    ref.current = value;\n  } catch (error) {\n    throw new Error(\"Cannot assign value '\" + value + \"' to ref '\" + ref + \"'\");\n  }\n}\n/**\n * Combine multiple React refs into a single ref function.\n * This is used mostly when you need to allow consumers forward refs to\n * internal components\n *\n * @param refs refs to assign to value to\n */\n\n\nfunction mergeRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  return function (node) {\n    refs.forEach(function (ref) {\n      return assignRef(ref, node);\n    });\n  };\n}\n/**\n * Creates a named context, provider, and hook.\n *\n * @param options create context options\n */\n\n\nfunction createContext(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$strict = _options.strict,\n      strict = _options$strict === void 0 ? true : _options$strict,\n      _options$errorMessage = _options.errorMessage,\n      errorMessage = _options$errorMessage === void 0 ? \"useContext: `context` is undefined. Seems you forgot to wrap component within the Provider\" : _options$errorMessage,\n      name = _options.name;\n  var Context = /*#__PURE__*/React.createContext(undefined);\n  Context.displayName = name;\n\n  function useContext() {\n    var context = React.useContext(Context);\n\n    if (!context && strict) {\n      var error = new Error(errorMessage);\n      error.name = \"ContextError\";\n      Error.captureStackTrace == null ? void 0 : Error.captureStackTrace(error, useContext);\n      throw error;\n    }\n\n    return context;\n  }\n\n  return [Context.Provider, useContext, Context];\n}\n/**\n * Gets only the valid children of a component,\n * and ignores any nullish or falsy child.\n *\n * @param children the children\n */\n\n\nfunction getValidChildren(children) {\n  return React.Children.toArray(children).filter(function (child) {\n    return /*#__PURE__*/React.isValidElement(child);\n  });\n}\n\nexport { assignRef, createContext, getValidChildren, mergeRefs };","map":{"version":3,"sources":["/Users/kendrawing/Documents/Coding Projects:Practice/1 Repos:Deployed/React-Ecommerce-Site/node_modules/@chakra-ui/react-utils/dist/chakra-ui-react-utils.esm.js"],"names":["isFunction","React","assignRef","ref","value","current","error","Error","mergeRefs","_len","arguments","length","refs","Array","_key","node","forEach","createContext","options","_options","_options$strict","strict","_options$errorMessage","errorMessage","name","Context","undefined","displayName","useContext","context","captureStackTrace","Provider","getValidChildren","children","Children","toArray","filter","child","isValidElement"],"mappings":"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","sourcesContent":["import { isFunction } from '@chakra-ui/utils';\nimport * as React from 'react';\n\n/**\n * Assigns a value to a ref function or object\n *\n * @param ref the ref to assign to\n * @param value the value\n */\nfunction assignRef(ref, value) {\n  if (ref == null) return;\n\n  if (isFunction(ref)) {\n    ref(value);\n    return;\n  }\n\n  try {\n    // @ts-ignore\n    ref.current = value;\n  } catch (error) {\n    throw new Error(\"Cannot assign value '\" + value + \"' to ref '\" + ref + \"'\");\n  }\n}\n/**\n * Combine multiple React refs into a single ref function.\n * This is used mostly when you need to allow consumers forward refs to\n * internal components\n *\n * @param refs refs to assign to value to\n */\n\nfunction mergeRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  return function (node) {\n    refs.forEach(function (ref) {\n      return assignRef(ref, node);\n    });\n  };\n}\n\n/**\n * Creates a named context, provider, and hook.\n *\n * @param options create context options\n */\nfunction createContext(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$strict = _options.strict,\n      strict = _options$strict === void 0 ? true : _options$strict,\n      _options$errorMessage = _options.errorMessage,\n      errorMessage = _options$errorMessage === void 0 ? \"useContext: `context` is undefined. Seems you forgot to wrap component within the Provider\" : _options$errorMessage,\n      name = _options.name;\n  var Context = /*#__PURE__*/React.createContext(undefined);\n  Context.displayName = name;\n\n  function useContext() {\n    var context = React.useContext(Context);\n\n    if (!context && strict) {\n      var error = new Error(errorMessage);\n      error.name = \"ContextError\";\n      Error.captureStackTrace == null ? void 0 : Error.captureStackTrace(error, useContext);\n      throw error;\n    }\n\n    return context;\n  }\n\n  return [Context.Provider, useContext, Context];\n}\n\n/**\n * Gets only the valid children of a component,\n * and ignores any nullish or falsy child.\n *\n * @param children the children\n */\n\nfunction getValidChildren(children) {\n  return React.Children.toArray(children).filter(function (child) {\n    return /*#__PURE__*/React.isValidElement(child);\n  });\n}\n\nexport { assignRef, createContext, getValidChildren, mergeRefs };\n"]},"metadata":{},"sourceType":"module"}