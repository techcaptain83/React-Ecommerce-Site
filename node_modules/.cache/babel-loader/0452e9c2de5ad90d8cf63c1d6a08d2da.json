{"ast":null,"code":"import { useTheme } from '@chakra-ui/system';\nimport { isBrowser, __DEV__, memoizedGet, isNumber, breakpoints, isArray, fromEntries, arrayToObjectNotation } from '@chakra-ui/utils';\nimport * as React from 'react';\nimport React__default from 'react';\nimport { useEnvironment } from '@chakra-ui/react-env';\nvar useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect;\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\n\nfunction useMediaQuery(query) {\n  var env = useEnvironment();\n  var queries = Array.isArray(query) ? query : [query];\n  var isSupported = isBrowser && \"matchMedia\" in env.window;\n\n  var _React$useState = React.useState(queries.map(function (query) {\n    return isSupported ? !!env.window.matchMedia(query).matches : false;\n  })),\n      matches = _React$useState[0],\n      setMatches = _React$useState[1]; // Specifying matches in the dependency list will cause the event listeners\n  // to unload and then load each time the dependency changes. This causes\n  // Media Query Events to be missed. The event listeners should only be unloaded\n  // when the component unloads.\n\n\n  useSafeLayoutEffect(function () {\n    if (!isSupported) return undefined;\n    var mediaQueryList = queries.map(function (query) {\n      return env.window.matchMedia(query);\n    });\n    var listenerList = mediaQueryList.map(function (_, index) {\n      var listener = function listener(mqlEvent) {\n        var queryIndex = mediaQueryList.findIndex(function (mediaQuery) {\n          return mediaQuery.media === mqlEvent.media;\n        }); // As the event listener is on the media query list, any time the\n        // listener is called, we know there is a change. There's no need\n        // to compare the previous matches with current. Using\n        // setMatches(matches => {...}) provides access to the current matches\n        // state.  Trying to access matches outside the setMatches function\n        // would provide data from the the time of instantiation (stale).\n\n        setMatches(function (matches) {\n          var currentMatches = matches.map(function (x) {\n            return x;\n          });\n          currentMatches[queryIndex] = mqlEvent.matches;\n          return currentMatches;\n        });\n      }; // Listening to the 'change' event on the Media Query List Object\n      // is more performant as the callback is only invoked when a specified\n      // media query is matched. Using addEventListener on the window object\n      // to listen for the resize event will call the callback on every\n      // viewport resize.\n\n\n      mediaQueryList[index].addEventListener(\"change\", listener);\n      return listener;\n    });\n    return function () {\n      mediaQueryList.forEach(function (_, index) {\n        mediaQueryList[index].removeEventListener(\"change\", listenerList[index]);\n      });\n    };\n  }, []);\n  return matches;\n}\n/**\n * Visibility\n *\n * React component to control the visibility of its\n * children based on the current breakpoint\n */\n\n\nvar Visibility = function Visibility(props) {\n  var breakpoint = props.breakpoint,\n      hide = props.hide,\n      children = props.children;\n\n  var _useMediaQuery = useMediaQuery(breakpoint),\n      show = _useMediaQuery[0];\n\n  var isVisible = hide ? !show : show;\n  var rendered = isVisible ? children : null;\n  return rendered;\n};\n\nvar Hide = function Hide(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query,\n    hide: true\n  }, children);\n};\n\nif (__DEV__) {\n  Hide.displayName = \"Hide\";\n}\n\nvar Show = function Show(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query\n  }, children);\n};\n\nif (__DEV__) {\n  Show.displayName = \"Show\";\n}\n\nvar getBreakpoint = function getBreakpoint(theme, value) {\n  return memoizedGet(theme, \"breakpoints.\" + value, value);\n};\n\nfunction useQuery(props) {\n  var _props$breakpoint = props.breakpoint,\n      breakpoint = _props$breakpoint === void 0 ? \"\" : _props$breakpoint,\n      below = props.below,\n      above = props.above;\n  var theme = useTheme();\n  var bpBelow = getBreakpoint(theme, below);\n  var bpAbove = getBreakpoint(theme, above);\n  var query = breakpoint;\n\n  if (bpBelow) {\n    query = \"(max-width: \" + bpBelow + \")\";\n  } else if (bpAbove) {\n    query = \"(min-width: \" + bpAbove + \")\";\n  }\n\n  return query;\n}\n/**\n * React hook used to get the user's animation preference.\n */\n\n\nfunction usePrefersReducedMotion() {\n  var _useMediaQuery = useMediaQuery(\"(prefers-reduced-motion: reduce)\"),\n      prefersReducedMotion = _useMediaQuery[0];\n\n  return prefersReducedMotion;\n}\n/**\n * React hook for getting the user's color mode preference.\n */\n\n\nfunction useColorModePreference() {\n  var _useMediaQuery2 = useMediaQuery([\"(prefers-color-scheme: light)\", \"(prefers-color-scheme: dark)\"]),\n      isLight = _useMediaQuery2[0],\n      isDark = _useMediaQuery2[1];\n\n  if (isLight) return \"light\";\n  if (isDark) return \"dark\";\n  return undefined;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction createMediaQueries(breakpoints) {\n  return Object.entries(breakpoints) // sort css units in ascending order to ensure media queries are generated\n  // in the correct order and reference to each other correctly aswell\n  .sort(function (a, b) {\n    return Number.parseInt(a[1], 10) > Number.parseInt(b[1], 10) ? 1 : -1;\n  }).map(function (_ref, index, arr) {\n    var breakpoint = _ref[0],\n        minWidth = _ref[1]; // given a following breakpoint\n\n    var next = arr[index + 1]; // this breakpoint must end prior the threshold of the next\n\n    var maxWidth = next ? next[1] : undefined;\n    var query = createMediaQueryString(minWidth, maxWidth);\n    return {\n      minWidth: minWidth,\n      maxWidth: maxWidth,\n      breakpoint: breakpoint,\n      query: query\n    };\n  });\n}\n/**\n * Create a media query string from the breakpoints,\n * using a combination of `min-width` and `max-width`.\n */\n\n\nfunction createMediaQueryString(minWidth, maxWidth) {\n  var hasMinWidth = parseInt(minWidth, 10) >= 0;\n\n  if (!hasMinWidth && !maxWidth) {\n    return \"\";\n  }\n\n  var query = \"(min-width: \" + toMediaString(minWidth) + \")\";\n\n  if (!maxWidth) {\n    return query;\n  }\n\n  if (query) {\n    query += \" and \";\n  }\n\n  query += \"(max-width: \" + toMediaString(subtract(maxWidth)) + \")\";\n  return query;\n}\n\nvar measurementRegex = /([0-9]+\\.?[0-9]*)/;\n\nvar calculateMeasurement = function calculateMeasurement(value, modifier) {\n  if (typeof value === \"number\") {\n    return \"\" + (value + modifier);\n  }\n\n  return value.replace(measurementRegex, function (match) {\n    return \"\" + (parseFloat(match) + modifier);\n  });\n};\n/**\n * 0.01 and 0.1 are too small of a difference for `px` breakpoint values\n *\n * @see https://github.com/chakra-ui/chakra-ui/issues/2188#issuecomment-712774785\n */\n\n\nfunction subtract(value) {\n  return calculateMeasurement(value, value.endsWith(\"px\") ? -1 : -0.01);\n}\n/**\n * Convert media query value to string\n */\n\n\nfunction toMediaString(value) {\n  return isNumber(value) ? value + \"px\" : value;\n}\n\nvar _excluded = [\"query\"],\n    _excluded2 = [\"query\"];\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\n\nfunction useBreakpoint(defaultBreakpoint) {\n  var _useTheme = useTheme(),\n      breakpoints = _useTheme.breakpoints;\n\n  var env = useEnvironment();\n  var mediaQueries = React__default.useMemo(function () {\n    return createMediaQueries(_extends({\n      base: \"0px\"\n    }, breakpoints));\n  }, [breakpoints]);\n\n  var _React$useState = React__default.useState(function () {\n    if (!defaultBreakpoint) {\n      return undefined;\n    }\n\n    var mediaQuery = mediaQueries.find(function (_ref) {\n      var breakpoint = _ref.breakpoint;\n      return breakpoint === defaultBreakpoint;\n    });\n\n    if (mediaQuery) {\n      mediaQuery.query;\n\n      var breakpoint = _objectWithoutPropertiesLoose(mediaQuery, _excluded);\n\n      return breakpoint;\n    }\n\n    return undefined;\n  }),\n      currentBreakpoint = _React$useState[0],\n      setCurrentBreakpoint = _React$useState[1];\n\n  var current = currentBreakpoint == null ? void 0 : currentBreakpoint.breakpoint;\n  var update = React__default.useCallback(function (query, breakpoint) {\n    if (query.matches && current !== breakpoint.breakpoint) {\n      setCurrentBreakpoint(breakpoint);\n    }\n  }, [current]);\n  React__default.useEffect(function () {\n    var listeners = new Set();\n    mediaQueries.forEach(function (_ref2) {\n      var query = _ref2.query,\n          breakpoint = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n\n      var mediaQuery = env.window.matchMedia(query); // trigger an initial update to determine media query\n\n      update(mediaQuery, breakpoint);\n\n      var handleChange = function handleChange() {\n        update(mediaQuery, breakpoint);\n      }; // add media query-listener\n\n\n      mediaQuery.addListener(handleChange); // push the media query list handleChange\n      // so we can use it to remove Listener\n\n      listeners.add({\n        mediaQuery: mediaQuery,\n        handleChange: handleChange\n      });\n      return function () {\n        // clean up 1\n        mediaQuery.removeListener(handleChange);\n      };\n    });\n    return function () {\n      // clean up 2: for safety\n      listeners.forEach(function (_ref3) {\n        var mediaQuery = _ref3.mediaQuery,\n            handleChange = _ref3.handleChange;\n        mediaQuery.removeListener(handleChange);\n      });\n      listeners.clear();\n    };\n  }, [mediaQueries, breakpoints, update, env.window]);\n  return current;\n}\n\nfunction getClosestValue(values, breakpoint, breakpoints$1) {\n  if (breakpoints$1 === void 0) {\n    breakpoints$1 = breakpoints;\n  }\n\n  var index = Object.keys(values).indexOf(breakpoint);\n\n  if (index !== -1) {\n    return values[breakpoint];\n  }\n\n  var stopIndex = breakpoints$1.indexOf(breakpoint);\n\n  while (stopIndex >= 0) {\n    var key = breakpoints$1[stopIndex];\n\n    if (values[key] != null) {\n      index = stopIndex;\n      break;\n    }\n\n    stopIndex -= 1;\n  }\n\n  if (index !== -1) {\n    var _key = breakpoints$1[index];\n    return values[_key];\n  }\n\n  return undefined;\n}\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @param values\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\n\n\nfunction useBreakpointValue(values, defaultBreakpoint) {\n  var breakpoint = useBreakpoint(defaultBreakpoint);\n  var theme = useTheme();\n  if (!breakpoint) return undefined;\n  /**\n   * Get the non-number breakpoint keys from the provided breakpoints\n   */\n\n  var breakpoints = Object.keys(theme.breakpoints);\n  var obj = isArray(values) ? fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(function (_ref) {\n    var key = _ref[0],\n        value = _ref[1];\n    return [key, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\n\nexport { Hide, Show, useBreakpoint, useBreakpointValue, useColorModePreference, useMediaQuery, usePrefersReducedMotion, useQuery };","map":{"version":3,"sources":["/Users/kendrawing/Documents/Coding Projects:Practice/1 Repos:Deployed/React-Ecommerce-Site/node_modules/@chakra-ui/media-query/dist/chakra-ui-media-query.esm.js"],"names":["useTheme","isBrowser","__DEV__","memoizedGet","isNumber","breakpoints","isArray","fromEntries","arrayToObjectNotation","React","React__default","useEnvironment","useSafeLayoutEffect","useLayoutEffect","useEffect","useMediaQuery","query","env","queries","Array","isSupported","window","_React$useState","useState","map","matchMedia","matches","setMatches","undefined","mediaQueryList","listenerList","_","index","listener","mqlEvent","queryIndex","findIndex","mediaQuery","media","currentMatches","x","addEventListener","forEach","removeEventListener","Visibility","props","breakpoint","hide","children","_useMediaQuery","show","isVisible","rendered","Hide","useQuery","createElement","displayName","Show","getBreakpoint","theme","value","_props$breakpoint","below","above","bpBelow","bpAbove","usePrefersReducedMotion","prefersReducedMotion","useColorModePreference","_useMediaQuery2","isLight","isDark","_objectWithoutPropertiesLoose","source","excluded","target","sourceKeys","Object","keys","key","i","length","indexOf","_extends","assign","arguments","prototype","hasOwnProperty","call","apply","createMediaQueries","entries","sort","a","b","Number","parseInt","_ref","arr","minWidth","next","maxWidth","createMediaQueryString","hasMinWidth","toMediaString","subtract","measurementRegex","calculateMeasurement","modifier","replace","match","parseFloat","endsWith","_excluded","_excluded2","useBreakpoint","defaultBreakpoint","_useTheme","mediaQueries","useMemo","base","find","currentBreakpoint","setCurrentBreakpoint","current","update","useCallback","listeners","Set","_ref2","handleChange","addListener","add","removeListener","_ref3","clear","getClosestValue","values","breakpoints$1","stopIndex","_key","useBreakpointValue","obj"],"mappings":"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","sourcesContent":["import { useTheme } from '@chakra-ui/system';\nimport { isBrowser, __DEV__, memoizedGet, isNumber, breakpoints, isArray, fromEntries, arrayToObjectNotation } from '@chakra-ui/utils';\nimport * as React from 'react';\nimport React__default from 'react';\nimport { useEnvironment } from '@chakra-ui/react-env';\n\nvar useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect;\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\n\nfunction useMediaQuery(query) {\n  var env = useEnvironment();\n  var queries = Array.isArray(query) ? query : [query];\n  var isSupported = isBrowser && \"matchMedia\" in env.window;\n\n  var _React$useState = React.useState(queries.map(function (query) {\n    return isSupported ? !!env.window.matchMedia(query).matches : false;\n  })),\n      matches = _React$useState[0],\n      setMatches = _React$useState[1]; // Specifying matches in the dependency list will cause the event listeners\n  // to unload and then load each time the dependency changes. This causes\n  // Media Query Events to be missed. The event listeners should only be unloaded\n  // when the component unloads.\n\n\n  useSafeLayoutEffect(function () {\n    if (!isSupported) return undefined;\n    var mediaQueryList = queries.map(function (query) {\n      return env.window.matchMedia(query);\n    });\n    var listenerList = mediaQueryList.map(function (_, index) {\n      var listener = function listener(mqlEvent) {\n        var queryIndex = mediaQueryList.findIndex(function (mediaQuery) {\n          return mediaQuery.media === mqlEvent.media;\n        }); // As the event listener is on the media query list, any time the\n        // listener is called, we know there is a change. There's no need\n        // to compare the previous matches with current. Using\n        // setMatches(matches => {...}) provides access to the current matches\n        // state.  Trying to access matches outside the setMatches function\n        // would provide data from the the time of instantiation (stale).\n\n        setMatches(function (matches) {\n          var currentMatches = matches.map(function (x) {\n            return x;\n          });\n          currentMatches[queryIndex] = mqlEvent.matches;\n          return currentMatches;\n        });\n      }; // Listening to the 'change' event on the Media Query List Object\n      // is more performant as the callback is only invoked when a specified\n      // media query is matched. Using addEventListener on the window object\n      // to listen for the resize event will call the callback on every\n      // viewport resize.\n\n\n      mediaQueryList[index].addEventListener(\"change\", listener);\n      return listener;\n    });\n    return function () {\n      mediaQueryList.forEach(function (_, index) {\n        mediaQueryList[index].removeEventListener(\"change\", listenerList[index]);\n      });\n    };\n  }, []);\n  return matches;\n}\n\n/**\n * Visibility\n *\n * React component to control the visibility of its\n * children based on the current breakpoint\n */\nvar Visibility = function Visibility(props) {\n  var breakpoint = props.breakpoint,\n      hide = props.hide,\n      children = props.children;\n\n  var _useMediaQuery = useMediaQuery(breakpoint),\n      show = _useMediaQuery[0];\n\n  var isVisible = hide ? !show : show;\n  var rendered = isVisible ? children : null;\n  return rendered;\n};\n\nvar Hide = function Hide(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query,\n    hide: true\n  }, children);\n};\n\nif (__DEV__) {\n  Hide.displayName = \"Hide\";\n}\n\nvar Show = function Show(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query\n  }, children);\n};\n\nif (__DEV__) {\n  Show.displayName = \"Show\";\n}\n\nvar getBreakpoint = function getBreakpoint(theme, value) {\n  return memoizedGet(theme, \"breakpoints.\" + value, value);\n};\n\nfunction useQuery(props) {\n  var _props$breakpoint = props.breakpoint,\n      breakpoint = _props$breakpoint === void 0 ? \"\" : _props$breakpoint,\n      below = props.below,\n      above = props.above;\n  var theme = useTheme();\n  var bpBelow = getBreakpoint(theme, below);\n  var bpAbove = getBreakpoint(theme, above);\n  var query = breakpoint;\n\n  if (bpBelow) {\n    query = \"(max-width: \" + bpBelow + \")\";\n  } else if (bpAbove) {\n    query = \"(min-width: \" + bpAbove + \")\";\n  }\n\n  return query;\n}\n\n/**\n * React hook used to get the user's animation preference.\n */\n\nfunction usePrefersReducedMotion() {\n  var _useMediaQuery = useMediaQuery(\"(prefers-reduced-motion: reduce)\"),\n      prefersReducedMotion = _useMediaQuery[0];\n\n  return prefersReducedMotion;\n}\n/**\n * React hook for getting the user's color mode preference.\n */\n\nfunction useColorModePreference() {\n  var _useMediaQuery2 = useMediaQuery([\"(prefers-color-scheme: light)\", \"(prefers-color-scheme: dark)\"]),\n      isLight = _useMediaQuery2[0],\n      isDark = _useMediaQuery2[1];\n\n  if (isLight) return \"light\";\n  if (isDark) return \"dark\";\n  return undefined;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction createMediaQueries(breakpoints) {\n  return Object.entries(breakpoints) // sort css units in ascending order to ensure media queries are generated\n  // in the correct order and reference to each other correctly aswell\n  .sort(function (a, b) {\n    return Number.parseInt(a[1], 10) > Number.parseInt(b[1], 10) ? 1 : -1;\n  }).map(function (_ref, index, arr) {\n    var breakpoint = _ref[0],\n        minWidth = _ref[1];\n    // given a following breakpoint\n    var next = arr[index + 1]; // this breakpoint must end prior the threshold of the next\n\n    var maxWidth = next ? next[1] : undefined;\n    var query = createMediaQueryString(minWidth, maxWidth);\n    return {\n      minWidth: minWidth,\n      maxWidth: maxWidth,\n      breakpoint: breakpoint,\n      query: query\n    };\n  });\n}\n/**\n * Create a media query string from the breakpoints,\n * using a combination of `min-width` and `max-width`.\n */\n\nfunction createMediaQueryString(minWidth, maxWidth) {\n  var hasMinWidth = parseInt(minWidth, 10) >= 0;\n\n  if (!hasMinWidth && !maxWidth) {\n    return \"\";\n  }\n\n  var query = \"(min-width: \" + toMediaString(minWidth) + \")\";\n\n  if (!maxWidth) {\n    return query;\n  }\n\n  if (query) {\n    query += \" and \";\n  }\n\n  query += \"(max-width: \" + toMediaString(subtract(maxWidth)) + \")\";\n  return query;\n}\n\nvar measurementRegex = /([0-9]+\\.?[0-9]*)/;\n\nvar calculateMeasurement = function calculateMeasurement(value, modifier) {\n  if (typeof value === \"number\") {\n    return \"\" + (value + modifier);\n  }\n\n  return value.replace(measurementRegex, function (match) {\n    return \"\" + (parseFloat(match) + modifier);\n  });\n};\n/**\n * 0.01 and 0.1 are too small of a difference for `px` breakpoint values\n *\n * @see https://github.com/chakra-ui/chakra-ui/issues/2188#issuecomment-712774785\n */\n\n\nfunction subtract(value) {\n  return calculateMeasurement(value, value.endsWith(\"px\") ? -1 : -0.01);\n}\n/**\n * Convert media query value to string\n */\n\n\nfunction toMediaString(value) {\n  return isNumber(value) ? value + \"px\" : value;\n}\n\nvar _excluded = [\"query\"],\n    _excluded2 = [\"query\"];\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\nfunction useBreakpoint(defaultBreakpoint) {\n  var _useTheme = useTheme(),\n      breakpoints = _useTheme.breakpoints;\n\n  var env = useEnvironment();\n  var mediaQueries = React__default.useMemo(function () {\n    return createMediaQueries(_extends({\n      base: \"0px\"\n    }, breakpoints));\n  }, [breakpoints]);\n\n  var _React$useState = React__default.useState(function () {\n    if (!defaultBreakpoint) {\n      return undefined;\n    }\n\n    var mediaQuery = mediaQueries.find(function (_ref) {\n      var breakpoint = _ref.breakpoint;\n      return breakpoint === defaultBreakpoint;\n    });\n\n    if (mediaQuery) {\n      mediaQuery.query;\n          var breakpoint = _objectWithoutPropertiesLoose(mediaQuery, _excluded);\n\n      return breakpoint;\n    }\n\n    return undefined;\n  }),\n      currentBreakpoint = _React$useState[0],\n      setCurrentBreakpoint = _React$useState[1];\n\n  var current = currentBreakpoint == null ? void 0 : currentBreakpoint.breakpoint;\n  var update = React__default.useCallback(function (query, breakpoint) {\n    if (query.matches && current !== breakpoint.breakpoint) {\n      setCurrentBreakpoint(breakpoint);\n    }\n  }, [current]);\n  React__default.useEffect(function () {\n    var listeners = new Set();\n    mediaQueries.forEach(function (_ref2) {\n      var query = _ref2.query,\n          breakpoint = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n\n      var mediaQuery = env.window.matchMedia(query); // trigger an initial update to determine media query\n\n      update(mediaQuery, breakpoint);\n\n      var handleChange = function handleChange() {\n        update(mediaQuery, breakpoint);\n      }; // add media query-listener\n\n\n      mediaQuery.addListener(handleChange); // push the media query list handleChange\n      // so we can use it to remove Listener\n\n      listeners.add({\n        mediaQuery: mediaQuery,\n        handleChange: handleChange\n      });\n      return function () {\n        // clean up 1\n        mediaQuery.removeListener(handleChange);\n      };\n    });\n    return function () {\n      // clean up 2: for safety\n      listeners.forEach(function (_ref3) {\n        var mediaQuery = _ref3.mediaQuery,\n            handleChange = _ref3.handleChange;\n        mediaQuery.removeListener(handleChange);\n      });\n      listeners.clear();\n    };\n  }, [mediaQueries, breakpoints, update, env.window]);\n  return current;\n}\n\nfunction getClosestValue(values, breakpoint, breakpoints$1) {\n  if (breakpoints$1 === void 0) {\n    breakpoints$1 = breakpoints;\n  }\n\n  var index = Object.keys(values).indexOf(breakpoint);\n\n  if (index !== -1) {\n    return values[breakpoint];\n  }\n\n  var stopIndex = breakpoints$1.indexOf(breakpoint);\n\n  while (stopIndex >= 0) {\n    var key = breakpoints$1[stopIndex];\n\n    if (values[key] != null) {\n      index = stopIndex;\n      break;\n    }\n\n    stopIndex -= 1;\n  }\n\n  if (index !== -1) {\n    var _key = breakpoints$1[index];\n    return values[_key];\n  }\n\n  return undefined;\n}\n\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @param values\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\n\nfunction useBreakpointValue(values, defaultBreakpoint) {\n  var breakpoint = useBreakpoint(defaultBreakpoint);\n  var theme = useTheme();\n  if (!breakpoint) return undefined;\n  /**\n   * Get the non-number breakpoint keys from the provided breakpoints\n   */\n\n  var breakpoints = Object.keys(theme.breakpoints);\n  var obj = isArray(values) ? fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(function (_ref) {\n    var key = _ref[0],\n        value = _ref[1];\n    return [key, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\n\nexport { Hide, Show, useBreakpoint, useBreakpointValue, useColorModePreference, useMediaQuery, usePrefersReducedMotion, useQuery };\n"]},"metadata":{},"sourceType":"module"}